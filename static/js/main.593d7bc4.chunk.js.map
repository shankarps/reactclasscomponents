{"version":3,"sources":["display.js","loader.js","index.js"],"names":["GobalDisplay","props","console","log","className","lat","long","Spinner","class","message","defaultProps","App","state","errorMsg","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","err","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sNAuBeA,G,MAhBM,SAAAC,GAEnB,OADAC,QAAQC,IAAIF,GAEV,yBAAKG,UAAU,kBACb,0CAAgBH,EAAMI,KACtB,2CAAiBJ,EAAMK,MACvB,6BACE,4BACE,uBAAGF,UAAU,+BADf,eAEiBH,EAAMI,IAZnB,EAAU,sBACR,2BCHRE,EAAU,SAAAN,GACd,OACE,yBAAKO,MAAM,oBACT,yBAAKA,MAAM,sBAAsBP,EAAMQ,WAM7CF,EAAQG,aAAe,CAAED,QAAS,oBAEnBF,QCRTI,E,YAGJ,WAAYV,GAAQ,IAAD,8BAEjB,4CAAMA,KAMRW,MAAQ,CAAEP,IAAK,MAJb,EAAKO,MAAQ,CAAEP,IAAK,KAAMC,KAAM,KAAMO,SAAU,MAJ/B,E,iFAUE,IAAD,OAClBX,QAAQC,IAAI,iCAGZW,OAAOC,UAAUC,YAAYC,oBAE3B,SAAAC,GACEhB,QAAQC,IAAIe,GACZ,EAAKC,SAAS,CACZd,IAAKa,EAASE,OAAOC,SACrBf,KAAMY,EAASE,OAAOE,eAG1B,SAAAC,GACErB,QAAQC,IAAIoB,GACZ,EAAKJ,SAAS,CAAEN,SAAUU,EAAId,e,2CAMlCP,QAAQC,IAAI,oC,+BAMZ,OAAIqB,KAAKZ,MAAMC,WAAaW,KAAKZ,MAAMP,IAEnC,6BACE,+CAAqBmB,KAAKZ,MAAMC,YAIjCW,KAAKZ,MAAMC,UAAYW,KAAKZ,MAAMP,IAEnC,kBAAC,EAAD,CACEA,IAAKmB,KAAKZ,MAAMP,IAChBC,KAAMkB,KAAKZ,MAAMN,OAIhB,kBAAC,EAAD,CAAQG,QAAQ,8B,GAvDTgB,IAAMC,WA2DxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.593d7bc4.chunk.js","sourcesContent":["import \"./display.css\";\r\nimport React from \"react\";\r\n\r\nconst getHemisphere = lat => {\r\n  if (lat > 0) return \"Northern Hemisphere\";\r\n  else return \"Southern Hemisphere\";\r\n};\r\nconst GobalDisplay = props => {\r\n  console.log(props);\r\n  return (\r\n    <div className=\"global-display\">\r\n      <div>Latitude: {props.lat}</div>\r\n      <div>Longitude: {props.long}</div>\r\n      <div>\r\n        <h3>\r\n          <i className=\"icon-style huge icon globe\"></i> Hemisphere:\r\n          {getHemisphere(props.lat)}\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GobalDisplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = props => {\r\n  return (\r\n    <div class=\"ui active dimmer\">\r\n      <div class=\"ui big text loader\">{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n//Set default props for the component - used when the component is loaded without a prop.\r\nSpinner.defaultProps = { message: \"Loading page....\" };\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport GobalDisplay from \"./display\";\r\nimport Loader from \"./loader.js\";\r\n\r\nclass App extends React.Component {\r\n  //A generic Javascript meethod. similar to Java constructor.\r\n  //props mandatory.\r\n  constructor(props) {\r\n    //similar to Java super(). Calls the base class constructor.\r\n    super(props);\r\n    //init state object\r\n    this.state = { lat: null, long: null, errorMsg: null };\r\n  }\r\n\r\n  //redundant - state is also set in the constructor.\r\n  state = { lat: null };\r\n\r\n  componentDidMount() {\r\n    console.log(\"component mount method called\");\r\n    //load the eo location\r\n    //Two callbacks - first for success, second in case of failure\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      //runs asynchronously\r\n      position => {\r\n        console.log(position);\r\n        this.setState({\r\n          lat: position.coords.latitude,\r\n          long: position.coords.longitude\r\n        });\r\n      },\r\n      err => {\r\n        console.log(err);\r\n        this.setState({ errorMsg: err.message });\r\n      }\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\"component update method called\");\r\n  }\r\n\r\n  //Default mandatory method for every react class based component.\r\n  render() {\r\n    //Conditionally display html\r\n    if (this.state.errorMsg && !this.state.lat) {\r\n      return (\r\n        <div>\r\n          <div>Error message: {this.state.errorMsg}</div>\r\n        </div>\r\n      );\r\n    }\r\n    if (!this.state.errorMsg && this.state.lat) {\r\n      return (\r\n        <GobalDisplay\r\n          lat={this.state.lat}\r\n          long={this.state.long}\r\n        ></GobalDisplay>\r\n      );\r\n    }\r\n    return <Loader message=\"Waiting for loacation\"></Loader>;\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}